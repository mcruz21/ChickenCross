

#include <SFML/Graphics.hpp>   //using namespace sf

#include <time.h>

//dimensions for window size and background

int num_vertBox = 30, num_horzBox = 20;
int score;
int size = 16; //number of pixels

int w = size * num_horzBox;  //background number of pixels in width

int h = size * num_vertBox;    //background number of pixels in height
//Snake variables to dertermine length and direction

int button;    //direction the block is moving
int block = 8;    //initial size is 8

//Actual Snake in game is an array of x,y coordinates of sprite2

struct Dash

{
    int x, y;        //each sprite of snake needs an x,y coordinate
    
}j[1],a[8],b[8],c[8],d[8],f[8],z[8],x[8],y[8],g[8];

//***NEW*** this is the fruit or food that the snake will eat
struct Fruit
{
    int x, y;    // only need one sprite needed for one food item
    
}food[1];
struct base
{
    int x, y;    // only need one sprite needed for one food item
}tray[20];

void move() {
    //If block eats fruit place somewhere and increment score
    if (((j[0].x) == food[0].x) && ((j[0].y) == food[0].y))
        
    {
        score++;
        food[0].x = rand() % num_horzBox;
        food[0].y = rand() % num_vertBox;
    }
   //move left
    if (button == 1){
       
          j[0].x -= 1;
    }
    //move right
    if (button == 0){
      
        j[0].x += 1;
    }
    //space button to move down
    if(button==2){
      j[0].y +=1;
            }
    //Check to see if player falls through holes if they do start at beginning
    for(int i=0;i<8;i++){
       if ((((j[0].x) == a[i].x) && ((j[0].y) == a[0].y))){
        j[0].x=0;
        j[0].y=0;
           score=0;
    }}
    for(int i=0;i<8;i++){
        if ((((j[0].x) == b[i].x) && ((j[0].y) == b[0].y))){
            j[0].x=0;
            j[0].y=0;
            score=0;
        }}
    for(int i=0;i<8;i++){
        if ((((j[0].x) == c[i].x) && ((j[0].y) == c[0].y))){
            j[0].x=0;
            j[0].y=0;
            score=0;
        }}
    for(int i=0;i<8;i++){
        if ((((j[0].x) == d[i].x) && ((j[0].y) == d[0].y))){
            j[0].x=0;
            j[0].y=0;
            score=0;
        }}
    for(int i=0;i<8;i++){
        if ((((j[0].x) == f[i].x) && ((j[0].y) == f[0].y))){
            j[0].x=0;
            j[0].y=0;
            score=0;
        }}
    for(int i=0;i<8;i++){
        if ((((j[0].x) == z[i].x) && ((j[0].y) == z[0].y))){
            j[0].x=0;
            j[0].y=0;
            score=0;
        }}
    for(int i=0;i<8;i++){
        if ((((j[0].x) == x[i].x) && ((j[0].y) == x[0].y))){
            j[0].x=0;
            j[0].y=0;
            score=0;
        }}
    for(int i=0;i<8;i++){
        if ((((j[0].x) == y[i].x) && ((j[0].y) == y[0].y))){
            j[0].x=0;
            j[0].y=0;
            score=0;
        }}
    for(int i=0;i<8;i++){
        if ((((j[0].x) == g[i].x) && ((j[0].y) == g[0].y))){
            j[0].x=0;
            j[0].y=0;
            score=0;
        }}
 
   //loop player around if pass sides
    if (j[0].x > num_horzBox)
        j[0].x = 0;
    if (j[0].x < 0)
        j[0].x = num_horzBox;
   
}

int main()
{
    
    //Setting pseudorandom time, TODO:discuss true random vs pseudorandom
    
    srand(time(0));

    //Window that we can play the game in
    
    sf::RenderWindow window(sf::VideoMode(w, h), "Chicken Cross");
  
    sf::Texture t1, t2, t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13;
    
    
    t1.loadFromFile("/Users/Cruz/Desktop/image/white.png");
    t2.loadFromFile("/Users/Cruz/Desktop/image/avocado.png");
    t4.loadFromFile("/Users/Cruz/Desktop/image/chicken.png");
    t3.loadFromFile("/Users/Cruz/Desktop/image/green.png");
    t5.loadFromFile("/Users/Cruz/Desktop/image/black.png");
    t6.loadFromFile("/Users/Cruz/Desktop/image/black.png");
    t7.loadFromFile("/Users/Cruz/Desktop/image/black.png");
    t8.loadFromFile("/Users/Cruz/Desktop/image/black.png");
    t9.loadFromFile("/Users/Cruz/Desktop/image/black.png");
    t10.loadFromFile("/Users/Cruz/Desktop/image/black.png");
    t11.loadFromFile("/Users/Cruz/Desktop/image/black.png");
    t12.loadFromFile("/Users/Cruz/Desktop/image/black.png");
    t13.loadFromFile("/Users/Cruz/Desktop/image/black.png");
    
   
    //Sprite has physical dimmensions that can be set in
    
    //coordinate system, setPosition(x,y), and drawn on screen
    
    sf::Sprite sprite1(t1);
    sf::Sprite sprite2(t2);
    sf::Sprite sprite3(t3);
    sf::Sprite sprite4(t4);
    sf::Sprite sprite5(t5);
    sf::Sprite sprite6(t6);
    sf::Sprite sprite7(t7);
    sf::Sprite sprite8(t8);
    sf::Sprite sprite9(t9);
    sf::Sprite sprite10(t10);
    sf::Sprite sprite11(t11);
    sf::Sprite sprite12(t12);
    sf::Sprite sprite13(t13);
    
    sf::Clock clock;
    
    float timer = 0.0f, delay = 0.1f;
    
    while (window.isOpen())
        
    {

        float time = clock.getElapsedTime().asSeconds();
        
        clock.restart();
        
        timer += time;
  
        sf::Event e;

        while (window.pollEvent(e))
        {
            if (e.type == sf::Event::Closed)
            {
                window.close();
            }
        }
      
        //Control block
    
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Right)) button = 0;
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Left)) button = 1;
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Space)) button = 2;
     
        for(int i=0;i<num_horzBox;i++){
            tray[i].x=i;
        }
        
        tray[0].y=29;
        
        
        
        food[1].x = 10;
        food[1].y = 11;
        //black holes
        a[0].x=3;
        a[1].x=7;
        a[2].x=13;
        a[3].x=17;
        a[4].x=5;
        a[5].x=9;
        a[6].x=15;
        a[7].x=19;
        a[0].y=3;
        
        b[0].x=4;
        b[1].x=9;
        b[2].x=15;
        b[3].x=19;
        b[4].x=10;
        b[5].x=12;
        b[6].x=13;
        b[7].x=14;
        b[0].y=5;
        
        c[0].x=6;
        c[1].x=10;
        c[2].x=14;
        c[3].x=16;
        c[4].x=8;
        c[5].x=18;
        c[6].x=1;
        c[7].x=2;
        c[0].y=9;
        
        d[0].x=13;
        d[1].x=16;
        d[2].x=19;
        d[3].x=20;
        d[2].x=1;
        d[3].x=3;
        d[2].x=5;
        d[3].x=6;
        d[0].y=11;
        
        f[0].x=2;
        f[1].x=14;
        f[2].x=8;
        f[3].x=6;
        f[4].x=18;
        f[5].x=3;
        f[6].x=10;
        f[6].x=11;
        f[0].y=15;
        
        z[0].x=10;
        z[1].x=5;
        z[2].x=7;
        z[3].x=12;
        z[0].x=14;
        z[1].x=6;
        z[2].x=7;
        z[3].x=16;
        z[0].y=19;
        
        x[0].x=7;
        x[1].x=11;
        x[2].x=12;
        x[3].x=16;
        x[4].x=17;
        x[5].x=18;
        x[6].x=19;
        x[7].x=20;
        x[0].y=23;
        
        y[0].x=7;
        y[1].x=9;
        y[2].x=11;
        y[3].x=13;
        y[4].x=15;
        y[5].x=17;
        y[6].x=19;
        y[7].x=1;
        y[0].y=27;
        
        g[0].x=1;
        g[1].x=3;
        g[2].x=5;
        g[3].x=15;
        g[4].x=17;
        g[5].x=19;
        g[4].x=4;
        g[5].x=7;
        g[0].y=28;
        
        
       
        
        if (timer > delay)
            
        {
            
            timer = 0; //reset timer
            
            move();    //move Snake one sprite forward
            
        }
        
        /*****************
         
         //Draw in window
         
         *****************/
        
        window.clear();    //clear the window so new frame can be drawn in
      
        
        for (int i = 0; i < num_horzBox; i++)
            
        {
            
            for (int j = 0; j < num_vertBox; j++)
                
            {
                sprite1.setPosition(i*size, j*size);
               
                window.draw(sprite1);
                
            }
            
        }
    
        sprite2.setPosition(food[0].x*size, food[0].y*size);
        window.draw(sprite2);
        sprite4.setPosition(j[0].x*size, j[0].y*size);
         window.draw(sprite4);
        
        //Draw black holes
        for(int i=0;i<8;i++){
            sprite5.setPosition(a[i].x*size, a[0].y*size);
          window.draw(sprite5);
        }
        for(int i=0;i<8;i++){
            sprite6.setPosition(b[i].x*size, b[0].y*size);
            window.draw(sprite6);
        }
        for(int i=0;i<8;i++){
            sprite7.setPosition(c[i].x*size, c[0].y*size);
            window.draw(sprite7);
        }
        for(int i=0;i<8;i++){
            sprite8.setPosition(d[i].x*size, d[0].y*size);
            window.draw(sprite8);
        }
        for(int i=0;i<8;i++){
            sprite9.setPosition(z[i].x*size, z[0].y*size);
            window.draw(sprite9);
        }
        for(int i=0;i<8;i++){
            sprite10.setPosition(x[i].x*size, x[0].y*size);
            window.draw(sprite10);
        }
        for(int i=0;i<8;i++){
            sprite11.setPosition(y[i].x*size, y[0].y*size);
            window.draw(sprite11);
        }
        for(int i=0;i<8;i++){
            sprite12.setPosition(f[i].x*size, f[0].y*size);
            window.draw(sprite12);
        }
        for(int i=0;i<8;i++){
            sprite13.setPosition(g[i].x*size, g[0].y*size);
            window.draw(sprite13);
        }
        
        
        
      
      
       
        

        //draw tray
        for(int i=0;i<21;i++){
        sprite3.setPosition(tray[i].x*size, tray[0].y*size);
        
        window.draw(sprite3);
        }

        //Show everything we have drawn on the screen
        
        window.display();
        
    }
    
    return 0;
    
}
